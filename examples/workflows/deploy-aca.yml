# @description: Deploy an application to Azure Container Apps with GitHub Actions
# @author: DevOps Team
# @version: 1.0.0
name: Deploy to Azure Container Apps

on:
  push:
    branches: [main, dev]
    paths:
      - "src/**"
      - "Dockerfile"
      - ".github/workflows/deploy-aca.yml"
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "Dockerfile"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: "dev"
      debug:
        description: "Enable debug mode"
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  APP_NAME: ${{ github.repository_owner }}-app

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.APP_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max

  deploy-dev:
    if: github.event_name != 'pull_request' || github.event.inputs.environment == 'dev'
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Container App
        uses: Azure/containerapp-deploy@v1
        with:
          containerAppName: app-dev
          resourceGroup: rg-containerapp-dev
          imageToDeploy: ${{ needs.build.outputs.image_tag }}
          targetPort: 8080
          ingress: external

  deploy-staging:
    if: github.ref == 'refs/heads/main' && (github.event_name != 'pull_request' || github.event.inputs.environment == 'staging')
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Container App
        uses: Azure/containerapp-deploy@v1
        with:
          containerAppName: app-staging
          resourceGroup: rg-containerapp-staging
          imageToDeploy: ${{ needs.build.outputs.image_tag }}
          targetPort: 8080
          ingress: external

  deploy-prod:
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'prod'
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Container App
        uses: Azure/containerapp-deploy@v1
        with:
          containerAppName: app-prod
          resourceGroup: rg-containerapp-prod
          imageToDeploy: ${{ needs.build.outputs.image_tag }}
          targetPort: 8080
          ingress: external
